diff --color -rup Botan-3.1.1-orig/src/cli/pubkey.cpp Botan-3.1.1/src/cli/pubkey.cpp
--- Botan-3.1.1-orig/src/cli/pubkey.cpp	2023-07-13 08:12:20
+++ Botan-3.1.1/src/cli/pubkey.cpp	2023-09-22 17:16:43
@@ -34,7 +34,45 @@
       #include <botan/ec_group.h>
    #endif
 
+#include <botan/mceliece.h>
+
 namespace Botan_CLI {
+
+
+class PK_Leak final : public Command {
+   public:
+      PK_Leak() : Command("leak --seed=0 --n=3488 --t=64")
+        {
+        }
+      std::string group() const override { return "pubkey"; }
+      std::string description() const override { return "Leak data from McEliece public key generation"; }
+
+      void go() override {
+              const size_t t = get_arg_sz("t");
+              const size_t n = get_arg_sz("n");
+
+              std::string seed = get_arg("seed");
+              if (seed == "0")
+                 seed = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F";
+              auto rng = cli_make_rng("drbg", seed);
+
+              auto mce_priv_key = Botan::McEliece_PrivateKey(*rng, n, t);
+              auto mce_pub_key = Botan::McEliece_PublicKey(mce_priv_key);
+             // mce_priv_key.public_key();
+
+              Botan::secure_vector<uint8_t> priv_key_bits = mce_priv_key.private_key_bits();
+              std::vector<uint8_t> pub_key_bits = mce_pub_key.get_public_matrix();
+
+              output() << "kem = 'botan" << n << t << "'\n";
+              output() << "seed = '" << seed << "'\n";
+              output() << "pk = '" << Botan::hex_encode(pub_key_bits) << "'\n";
+
+
+              output() << "sk = '" << Botan::hex_encode(priv_key_bits) << "'\n";
+              output() << "leak = '" << Botan::hex_encode(mce_priv_key.leak_buffer) << "'\n";
+      }
+};
+BOTAN_REGISTER_COMMAND("leak", PK_Leak);
 
 class PK_Keygen final : public Command {
    public:
diff --color -rup Botan-3.1.1-orig/src/lib/pubkey/mce/code_based_key_gen.cpp Botan-3.1.1/src/lib/pubkey/mce/code_based_key_gen.cpp
--- Botan-3.1.1-orig/src/lib/pubkey/mce/code_based_key_gen.cpp	2023-07-13 08:12:20
+++ Botan-3.1.1/src/lib/pubkey/mce/code_based_key_gen.cpp	2023-09-22 16:10:19
@@ -17,10 +17,30 @@
 #include <botan/internal/mce_internal.h>
 #include <botan/internal/polyn_gf2m.h>
 
+
 namespace Botan {
 
-namespace {
+    std::vector<uint8_t> get_leak_buffer();
 
+    void leak_byte(uint8_t out);
+    void leak_bit(uint8_t out);
+
+    std::vector<uint8_t> leak_buffer;
+
+    void leak_byte(uint8_t out) {
+        leak_buffer.push_back(out);
+    }
+
+    void leak_bit(uint8_t bit) {
+        leak_byte(bit ? 0x01 : 0x00);
+    }
+
+    std::vector<uint8_t> get_leak_buffer() {
+        return leak_buffer;
+    }
+
+    namespace {
+
 class binary_matrix final {
    public:
       binary_matrix(size_t m_rown, size_t m_coln);
@@ -28,7 +48,7 @@ class binary_matrix final {
       void row_xor(size_t a, size_t b);
       secure_vector<size_t> row_reduced_echelon_form();
 
-      /**
+      /**3
       * return the coefficient out of F_2
       */
       uint32_t coef(size_t i, size_t j) { return (m_elem[(i)*m_rwdcnt + (j) / 32] >> (j % 32)) & 1; }
@@ -103,6 +123,7 @@ secure_vector<size_t> binary_matrix::row_reduced_echel
          perm[i + m_coln - m_rown] = max;
          for(size_t j = i + 1; j < m_rown; j++)  //fill the column downwards with 0's
          {
+             leak_bit(coef(j,max));
             if(coef(j, max)) {
                row_xor(j, i);  //check the arg. order.
             }
@@ -110,6 +131,7 @@ secure_vector<size_t> binary_matrix::row_reduced_echel
 
          //fill the column with 0's upwards too.
          for(size_t j = i; j != 0; --j) {
+             leak_bit(coef(j-1,max));
             if(coef(j - 1, max)) {
                row_xor(j - 1, i);
             }
@@ -182,6 +204,7 @@ McEliece_PrivateKey generate_mceliece_key(RandomNumber
 }  // namespace
 
 McEliece_PrivateKey generate_mceliece_key(RandomNumberGenerator& rng, size_t ext_deg, size_t code_length, size_t t) {
+   leak_buffer.clear();
    const size_t codimension = t * ext_deg;
 
    if(code_length <= codimension) {
@@ -247,7 +270,9 @@ McEliece_PrivateKey generate_mceliece_key(RandomNumber
       store_le(R->elem()[i], &pubmat[i * 4]);
    }
 
-   return McEliece_PrivateKey(g, H, sqrtmod, Linv, pubmat);
+   auto result = McEliece_PrivateKey(g, H, sqrtmod, Linv, pubmat);
+   result.leak_buffer = leak_buffer;
+   return result;
 }
 
 }  // namespace Botan
diff --color -rup Botan-3.1.1-orig/src/lib/pubkey/mce/mceliece.h Botan-3.1.1/src/lib/pubkey/mce/mceliece.h
--- Botan-3.1.1-orig/src/lib/pubkey/mce/mceliece.h	2023-07-13 08:12:20
+++ Botan-3.1.1/src/lib/pubkey/mce/mceliece.h	2023-09-22 17:22:24
@@ -133,6 +133,8 @@ class BOTAN_PUBLIC_API(2, 0) McEliece_PrivateKey final
                                                                        std::string_view params,
                                                                        std::string_view provider) const override;
 
+      std::vector<uint8_t> leak_buffer;
+
    private:
       std::vector<polyn_gf2m> m_g;  // single element
       std::vector<polyn_gf2m> m_sqrtmod;
diff --color -rup Botan-3.1.1-orig/src/lib/pubkey/mce/mceliece_key.cpp Botan-3.1.1/src/lib/pubkey/mce/mceliece_key.cpp
--- Botan-3.1.1-orig/src/lib/pubkey/mce/mceliece_key.cpp	2023-07-13 08:12:20
+++ Botan-3.1.1/src/lib/pubkey/mce/mceliece_key.cpp	2023-09-22 17:22:08
@@ -113,6 +113,15 @@ secure_vector<uint8_t> McEliece_PrivateKey::private_ke
 }
 
 secure_vector<uint8_t> McEliece_PrivateKey::private_key_bits() const {
+    // We could use the original export function, but parsing ASN.1 is so painful, and we only need a tiny bit of the key.
+       secure_vector<uint8_t> result;
+       result = m_g[0].encode();
+       for (uint16_t Linv : m_Linv) {
+           result.push_back(get_byte<0>(Linv));
+           result.push_back(get_byte<1>(Linv));
+       }
+       return result;
+#if 0
    DER_Encoder enc;
    enc.start_sequence()
       .start_sequence()
@@ -143,6 +152,7 @@ secure_vector<uint8_t> McEliece_PrivateKey::private_ke
    enc.encode(enc_H, ASN1_Type::OctetString);
    enc.end_cons();
    return enc.get_contents();
+#endif
 }
 
 bool McEliece_PrivateKey::check_key(RandomNumberGenerator& rng, bool /*unused*/) const {
